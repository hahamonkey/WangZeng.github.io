[{"title":"常见浏览器兼容性问题解决方案","path":"08/浏览器兼容性问题解决方案/","text":"前言 作为一个前端开发人员，在面试中被问及浏览器的兼容性问题几乎是必不可免的。这个问题我觉得主要考验两点能力： 是否经验丰富，能够快速的投入到工作当中 是否时刻关注前沿技术，针对某个问题对于新的解决方案是否有过了解或者说你是否能够举一反三，有好的总结能力 其实，对于任何Web项目，不管用于开发的平台是什么，跨浏览器兼容性错误都是不可避免的。由于市场上浏览器种类众多，不同浏览器其内核不尽相同，所以各浏览器对网页的解析就有一定出入，这也是导致浏览器兼容问题的主要原因。下面列举一些市场上常见的浏览器： Webkit：Safari、Chrome等，使用此内核的浏览器市场占有率最大 Trident：IE、MaxThon、360、搜狗浏览器等，该类内核的浏览器市场占有率屈居第二 GecKo：Netscaper6及以上版本，浏览器代表有：MozillaSuite、SeaMonkey等 Presto: 原来Opera7及以上均为此内核，不过现在基本淘汰使用Blink内核，Blink内核作为Webkit的分支 接下来，我们进入正题，讨论浏览器的兼容性问题无非就是三个方面：HTML和CSS兼容性、交互兼容性以及浏览器hack三个方面，本文中简单列举一些常见的兼容性问题以及相应的解决方案： HTML 和 CSS 兼容 1. 浏览器的初始化样式不同导致的兼容性问题 针对这个问题很多人会采取 * {margin: 0; padding: 0;} 的方式，这种方式简单方便的一次性重置所有HTML网页元素的浏览器样式，代码少，控制量大。与此同时，由于过于暴力，方便的同时重置了本不需要重置的样式，例如table元素，这个时候就要需要为它单独再设置默认样式，增加了代码量。目前大多数采取的方式是通过 Normalize.css 来抹平差异化,定制自己的 reset.css也当然可以，不过要尽量避免通配符形式全局重置的暴力写法。对于IE浏览器和非IE浏览器之间的区别，基本使用 normarize.css 和 reset.css 能处理大部分的问题。 2. 浏览器对 CSS3 的支持 页面终究是离不开浏览器的渲染，并不是所有的浏览器都支持CSS3的特性。幸运的是，CSS3特性大部分都已经有了很好的浏览器支持度，各浏览器对CSS3的支持也是越来越完善，但仍然存在部分属性在使用的时候加上浏览器前缀，浏览器内核与前缀对应关系如下（不同浏览器对具体属性的兼容可以参考 caniuse）： 3. 透明属性的兼容设置 在还原设计稿的时候常常会用到透明属性，但是 IE9 以下浏览器不支持 opacity 属性。下面给出不同版本 IE浏览器的解决方案： 1234opacity: 0.5;filter: alpha(opcaity = 50); // IE6 - IE8 习惯使用filter滤镜属性来进行实现filter： progid:DXImageTransform.Microsoft.Alpha(style = 0, opacity = 50); // IE4-IE9都支持滤镜写法progid:DXImageTransform.Microsoft.Alpha(Opacity=xx) 4. 外边距合并问题 块的顶部外边距和底部外边距有时候会重合为单个外边距，其大小为两值中间的最大值，这种行为就被称为外边距合并。通常情况下外边距合并发生在三种情况下： 相邻兄弟元素：两个兄弟元素之间的外边距回去两个元素外边距最大值 父元素和子元素：同样取两个外边距中的最大值 空元素：本身的上下外边距合并，取其中最大值 那么，该如何阻止这种问题的发生？因为只有是静态流的元素才会发生外边距合并，故设置浮动、定位都可以使得不会发生外边距合并的问题，但 inline-block是个例外，它既没有脱离文档流，但是它也不会发生这种现象。另外，由于 margin需要直接接触才会合并，根据盒子模型，针对第二种父元素和子元素，可以给父元素设置border或padding属性也是可以防止外边距合并的发生的。 5、chrome下默认文本解析 Chrome浏览器会将小于12px的文本强制按照12px来解析。chrome27以前的解决办法通过设置-webkit-text-size-adjust: none:来解决，现在可以通过CSS3的变换属性缩放来解决 6. 部分浏览器设置较小高度标签失去控制 在 IE6、7 和遨游浏览器中设置较小高度标签（一般小于10px）会超出设置的高度。出现这种问题的原因是IE8之前的浏览器会给标签一个最小默认的行高的高度，即使标签是空的，标签的高度还是会达到默认的行高。这种情况下给超出高度的标签设置overflow: hidden;或者设置行高小于设置的高度。 7. CSS Hack 兼容性属性设置，注意书写的顺序：优先写高等级浏览器支持方式、优先写支持浏览器多的方式 12345678910111213/*以 color 属性为例，注意书写顺序*/#box&#123; color: #f00; //所有浏览器都支持 color: #0f0 !important; //只有 IE6 无效 color: #00f\\9; //所有 IE 都有效 color: #ff0\\0; //IE8+ 有效 color: #f0f\\9\\0; //IE9+ 有效 *color: #fff; //仅 IE6, IE7 有效 #color: #0ff; //仅 IE6, IE7 有效 +color: #800; //仅 IE6, IE7 有效 -color: #008; //只有 IE6 有效 _color: #080; //只有 IE6 有效&#125; 交互兼容性 1. 获取兄弟节点 ie8以前不支·previousElementSibling和nextElementSibling,以及诸如此类带有Element的元素属性。利用previousSibling和 nextSibling等不带Element的属性实现如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455// 获取下一个紧邻的兄弟元素function getNextElement(element)&#123; var ele = element; if(ele.nextElementSibling) return ele.nextElementSibling; do&#123; ele = ele.nextSibling; &#125;while(ele &amp;&amp; ele.nodeType !== 1); return ele;&#125;// 获取上一个紧邻的兄弟元素function getPreviousElement(element)&#123; var ele = element; if(ele.perviousElementSibling) return ele.perviousElementSibling; do&#123; ele = ele.perviousSibling; &#125;while(ele &amp;&amp; ele.nodeType !== 1); return ele;&#125;// 获取第一个子元素function getFirstElement(parent)&#123; if(parent.firstElementChild) return parent.firstElementChild; var ele = parent.firstChild; while(ele &amp;&amp; ele.nodeType !== 1) ele = ele.nextSibling; return ele;&#125;// 获取最后一个子元素function getLastElement(parent)&#123; if(parent.LastElementChild) return parent.LastElementChild; var ele = parent.lastChild; while(ele &amp;&amp; ele.nodeType !== 1) ele = ele.perviousSibling; return ele;&#125;// 获取所有兄弟元素function sibling(ele)&#123; if(!ele) return null; var elements = [ ]; var el = ele.previousSibling; while(el)&#123; if(el.nodeType === 1) elements.push(el); el = el.previousSibling; &#125; el = element.nextSibling; while(el)&#123; if(el.nodeType === 1) elements.push(el); el = el.nextSibling; &#125; return elements;&#125; 另外，IE中有一些很好用的 DOM 方法，但是其他浏览器却没有，比如: ele.swapNode(anotherEle)用来交换节点 ele.removeNode()删除当前节点 ele.insertAgjacentHTML(‘position’,‘HTMLText’)和ele.insertAgjacentHTML(‘position’,ele)用来插入节点； 部分实现方式如下： 123456789101112131415161718//实现swapNode方法if(window.Node &amp;&amp; !Node.prototype.swapNode)&#123; Node.prototype.swapNode = function(node)&#123; var nextSibling = this.nextSibling; var parentNode = this.parentNode; node.parentNode.replaceChild(this, node); parentNode.insertBefore(node, nextSibling); &#125;&#125;//实现removeNodeif(window.Node &amp;&amp; !Node.prototype.removeNode)&#123; Node.prototype.removeNode = function()&#123; this.parentNode.removeChild(this); &#125;&#125;//insertAdjacentHTML和insertAdjacentElement可以用insertBefore代替//由于有现成方法替换，这里不写具体实现了 2. 注册事件 标准的绑定方法有两种，addEventListener和attachEvent前者是标准浏览器支持的API，后者是IE8以下浏览器支持的API: 123456789//例如给一个button注册click事件var el = document.getElementById('button'); //button是一个&lt;button&gt;元素var handler = function(e)&#123;alert(\"button clicked.\");&#125;;if(el.addEventLister)&#123; el.addEventListener(\"click\", handler,false);&#125;if(el.attachEvent)&#123; el.attachEvent(\"onclick\", handler);&#125; 需要注意的是： addEventLister的第一个参数事件类型是不加on前缀的，而attachEvent中需要加on前缀; addEventLister中的事件回调函数中的this指向事件元素target本身，而attachEvent中的事件回调函数的this指向的是window; addEventLister有第三个参数，true表示事件工作在捕获阶段，false为冒泡阶段(默认值:false)。而attachEvent只能工作在冒泡阶段; 解除事件方法标准方法removeListen()，在IE8中，对应使用detachEvent()。注意，他们和上面的注册方法一一对应，不能混用; 阻止默认事件标准方法 event.preventDefault(), 在IE8中，使用 event.returnValue = false; 阻止冒泡的方法 event.stopPropagation(), 在IE8中，使用 event.cancelBubble = true; 老版本 IE 中，事件函数内部的 this 不是被监听元素本身，而是 window 。故应该使用 call 改变 this 指向。 3. 事件对象 e.eventPhase 事件阶段，IE8及以前不支持，因为那时不支持捕获 e.target 始终是触发事件的对象。IE8以前用srcElement ie8以前用window.event获得事件对象，而不是回调函数的参数e 123456789function(e)&#123;&#125; return e || window.event;&#125;// 兼容targetfunction(e)&#123; target = e.target || e.srcElement; //do something else &#125; 4. 获取鼠标在页面上的位置 ie8以前没有完整的位置属性，部分属性需要通过已有的属性计算得到： 1234var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;var scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;var pageX = e.pageX || e.x || e.clientX + scrollLeft;var pageY = e.pageY || e.y || e.clientY + scrollTop; 5. 取消用户的文本的选择(多为移动端) 1window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty(); 浏览器Hack 1. 快速判断 IE 浏览器版本 12&lt;!--[if IE 8]&gt; ie8 &lt;![endif]--&gt;&lt;!--[if IE 9]&gt; ie9 &lt;![endif]--&gt; 2. 快速判断Safari浏览器 1var isSafari = /a/.__proto__=='//'; 3. 判断是否为Chrome浏览器 1var isChrome = Boolean(window.chrome); 本文中只是讨论了部分常见的浏览器兼容性问题，之后会作补充","link":"","permalink":"http://wzwdi.cn/08/浏览器兼容性问题解决方案/","categories":[],"tags":[{"name":"CSS","slug":"css","permalink":"http://wzwdi.cn/tags/css/"}]},{"title":"CSS三角形【转载】","path":"07/CSS三角形(转载)/","text":"在CSS中创建三角形是一项非常常见的UI任务。如果您想构建工具提示或任何下拉菜单，则可能需要一个。 有些情况下，您希望直观地连接两个元素 - 这个问题的一个解决方案是将一个组件指向另一个组件; 这是CSS三角形进入图片的地方。 正如您将看到的，我们可以通过很多方式实现所需的解决方案 - 就像在CSS中一样。在这篇文章中，我向您展示了一些样式表唯一的解决方案。 使用边框的 CSS 三角形 这个解决方案是一个经常出现在CSS中的hack。虽然这是一个棘手的解决方案，但它的实现效果令人惊讶。 在CSS中，如果您创建边框，则可以完全单独设置它们（顶部，右侧，底部，左侧）。 单独的侧面以对角线（45度）方式彼此连接，如真实相框或镶木地板边框。 由于这种行为，我们可以创建三角形，我们的样式元素没有任何宽度或高度。 在此之后，我们需要为边框设置透明背景，这是不必要的。 See the Pen aMwPQe by Caven (@Cavenw) on CodePen. 需要以下步骤： 创建一个单独的元素或样式::before / ::after 伪元素。 选择箭头的方向。您必须为方向的不同站点边界着色。如果要指向顶部则需要为边框底部着色，则需要为边框底部着色。 设置箭头宽度; 这有点棘手。如果是顶部箭头，我们的宽度将是左侧和右侧边框宽度，但我们的高度仅为底部宽度。 设置位置。大多数时候你想要一个绝对的位置。 使用Clip-path的CSS三角形 CSS 的 clip-path 是一种较新的，部分支持的功能。使用它，我们可以用任何原始形式掩盖元素。就像在图形程序中绘制SVG形状一样。 这是一个复杂的规范部分，所以如果您想了解更多，请访问MDN See the Pen aMwPQe by Caven (@Cavenw) on CodePen. 关于我们的例子：绘制一个三角形，我们需要 polygon() 函数，在设置宽度、高度、背景颜色之后，我们必须设置相对于容器边缘的的点。 使用 polygon() 我们可以根据需要声明任何点。欲了解更多信息和形状，你可以访问这个很酷的游乐场 这种解决方案的最大缺点是浏览器支持。如果要使用它，则需要如果您想使用它，您需要设置一个后备方案。否则，这就是对这个问题最好的、不陈腐的回答。 它就像是一个面具，我们可以提出任何创造性地解决方案，如渐变背景。 带旋转变换的CSS三角形 使用变换，我们可以旋转一个45度的元素，而不是隐藏其溢出的部分。看起来这个解决方案有点矫枉过正，它基于以前的解决方案，但可能会出现这种情况。 See the Pen aMwPQe by Caven (@Cavenw) on CodePen. 在示例中，我们在 ::before 上创建了一个方形元素和一个子元素。子元素的原始宽度和高度除以1.41（因为我们必须将较小的斜边设置为较大的斜边的宽度）。请注意，您还必须根据方向设置位置和变换原点。 带有 HTML 实体的 CSS 三角形 使用HTML实体是最基本的解决方案，但它可以在更简单的情况下工作。我总是对我在实践中看到实体的地方感到惊讶。 要使用它们，请将其中一个添加到:: before或:: after伪元素的content属性中。 1234◄ : &amp;#9668; ► : &amp;#9658; ▼ : &amp;#9660; ▲ : &amp;#9650; 原文链接：快速了解CSS三角形","link":"","permalink":"http://wzwdi.cn/07/CSS三角形(转载)/","categories":[],"tags":[{"name":"CSS","slug":"css","permalink":"http://wzwdi.cn/tags/css/"}]},{"title":"CSS实现水平垂直居中","path":"07/CSS实现水平垂直居中/","text":"作为一名前端工程师，元素居中是日常开发中处理的最常见问题之一。实现 CSS 居中的方式有很多种，各有利弊，这里我总结一下我遇到过或者用过的方案。 水平居中 1. 内联元素水平居中 利用 text-align: center 可以实现在块级元素内部的内联元素水平居中。这种方法对内联元素inline、内联块 inline-block、内联表 inline-table、inline-flex 元素水平居中均有效(即行内或类行内元素) text-align: center 2. 块级元素水平居中 margin: 0 auto; 123//对于一个有固定宽度的块级元素，设置它的`margin-left`、`margin-right`均为autoj即可让元素水平居中margin: 0 auto position + margin 1234567.son &#123; position: absolute; left: 0; right: 0; width: 固定值; margin: 0 auto;&#125; position + transform 123456.son &#123; position: absolute; left: 50%; width: 固定值; transform: translateX(-50%);&#125; flex布局 123456// 只需要给父元素设置如下：.parent &#123; display: flex; justify-content: center;&#125; 至此，以上写法都是不需要预先了解父元素的宽度即可设置居中，下面的这种写法就需要提交了解父元素的高度 position + 负外边距 123456.son &#123; position: absolute; left: 50%; width: 固定值; margin-left: -0.5*宽度;&#125; 3. 多个块级元素水平居中 如果需要居中两个或两个以上的块级元素，可能flex布局可以为你提供极大的便利，如下： See the Pen Centering Row of Blocks by Chris Coyier (@chriscoyier) on CodePen. 垂直居中 块级元素垂直居中与水平居中的处理方式大同小异，但还是相对于后者稍微棘手一点，下面的这些方式只是在水平居中的基础上做一些修改（主要针对特殊的属性差异）和补充，剩下的可以参考水平居中的写法类推。 1. &quot;inline-*&quot;元素垂直居中 1.1 单行文本元素居中 有时像文本或链接等行内元素居中显示，只是因为它们的上下有相等的填充 See the Pen Centering text (kinda) with Padding by Chris Coyier (@chriscoyier) on CodePen. 当然，在有些情况下无法通过这种填充的方式来进行居中，这时只需要设置`line-height`等于`height`即可 1.2 多行文本元素居中 顶部和底部的填充同样可以为多行文本提供居中效果，但有的时候像table-cell这种看起来的确可以通过这样的方式去实现，结果却不能将想象的效果呈现出来。这种情况下，vertical-align属性便能够发挥出它的作用： 方案一： See the Pen Centering text (kinda) with Padding by Chris Coyier (@chriscoyier) on CodePen. 方案二： 12345678910111213141516.parent &#123; position: relative;&#125;.parent::before &#123; content: \" \"; display: inline-block; height: 100%; width: 1%; vertical-align: middle;&#125;.parent p &#123; display: inline-block; vertical-align: middle;&#125; 2. 块级元素居中 2.1 flex布局 1234567.parent &#123; display: flex; jusitify-content: center; flex-direction: column; height: 固定值;&#125;// 这种方式同样可以作用于多行文本元素居中 2.2 其它方式参考水平居中的实现 视窗单位的解决方案 CSS Values and Units Level 3定义了一种新的单位，称为相对视窗(viewport-relative)长度单位。 vw是相对于视窗的宽度。与你预期刚好相反,1vw相当于视窗宽度的1%，而不是100% 与vw相似的是，1vh相当于视窗高度的1% 如果视窗的宽度小于高度，1vmin等于1vw，反之，如果视窗宽度大于高度，1vmin等于1vh 如果视窗的宽度大于高度，1vmax等于1vw，反之，如果视窗宽度小于高度，1vmax等于1vh 如下示例： 1234567div &#123; width: 500px; height: 500px; padding: 50px; margin: 50vh auto 0; transform: translateY(-50%);&#125; 目前，这种视窗单位大多数浏览器都已经支持，缺点就是只能相对于视窗居中，看起来与粘性定位有些共同之处。 这篇分享就到这结束了，如果发现了其中有错误欢迎前来指正或者您有好的想法也希望能一起探讨","link":"","permalink":"http://wzwdi.cn/07/CSS实现水平垂直居中/","categories":[],"tags":[{"name":"CSS","slug":"css","permalink":"http://wzwdi.cn/tags/css/"}]},{"title":"Git操作指南","path":"07/Git操作指南/","text":"","link":"","permalink":"http://wzwdi.cn/07/Git操作指南/","categories":[],"tags":[]},{"title":"Hexo+Github搭建博客","path":"04/Hexo-Github搭建博客/","text":"一直打算重新整一个博客，由于实习和准备毕业论文的原因搁置下来。刚好利用这几天的闲余时间，也在想要用什么方式去实现，最终选择了Hexo。这里分享一下从0到1搭建博客以及这个过程中遇到的一些问题，又是如何解决的。(注：本文基于Mac系统) 使用GitHub Pages + Hexo有以下几点好处： 无需关注生成网页源码的细节，只需用markdown攥写你的文章 github免费提供无限资源空间 Hexo基于Node.js，其对数据的静态处理方式来的更高效 相对于搭建独立博客，有绝对的控制权，管理方便 环境配置 安装Node.js 安装Git 创建Github项目 打开github，新建项目，项目名称推荐username.github.io(其中username为你的github名) 的形式，原因后面会提到，另外勾上 README 初始化选项； 打开setting，找到Github Pages，choose a theme选择一个主题。重新进入设置页找到 Github Pages 点击 https://hahamonkey.github.io 就会出现相应的网页了 Hexo安装 1. 安装Hexo 首先，在合适的地方新建文件夹，例如在D盘新建Blog(D:\\Blog)目录。接着打开控制台，定位到博客目录，键入下面的指令： 123npm install hexo-cli -g （可能会有几条报错语句，无视就好）npm install hexo --save hexo -v (查看是否安装成功) 接着初始化博客\bhexo init，hexo g生成静态资源，hexo s打开本地服务器预览网站。到此，单独的两部分都完成了。 2. 本地代码远程连接Github 控制台输入： 12git config --global user.name \"username\" // username-&gt;github用户名git config --global user.email \"email\" // email-&gt;github绑定邮箱 生成密钥 SSH key: 123ssh-keygen -t rsa -C \"email\"eval \"$(ssh-agent -s)\" (添加密钥到ssh-agent)ssh-add ~/.ssh/id_rsa (添加生成的SSH key到ssh-agent) 打开github，新建SSH。接着打开控制台终端定位到根目录，输入： 12cd ~/.sshopen . 复制id_rsa.pub文件中的内容到新建的SSH中 打开 Blog 根目录下的_config.yml文件，在文件的末尾添加如下配置： 123456deploy: type: git repository: https://github.com/hahamonkey/hahamonkey.github.io branch: master（注意： 冒号后跟空格符） 3. 写作 到了这一步，搭建hexo博客基本上算是完成了，接下来可以看一下搭建的博客是什么样子。记得每次新建文章之前 hexo clean 删除缓存文件，防止修改分类和标签或者修改主题之后无效，好了，那就来试一下吧： 12345hexo clean hexo new post filename 生成文件后，markdown语法编辑，具体参考 hexo官方文档hexo g 生成静态文件hexo s 打开本地服务器预览（选择性操作）hexo d 部署到 Github Pages 接着打开 https://hahamonkey.github.io 查看效果 4. 更换主题 你可能会觉得一开始选择的博客主题不太理想，好吧，当然会考虑到，也给你提供了一些选择。比较之下，这款 BlueLake 甚合我意，那就开始吧： 首先，下载这个主题 1git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/bluelake 打开Blog根目录下的 _config.yml 文件，找到 theme 字段,设置 theme: bluelake 清除缓存 hexo clean，生成静态文件 hexo g，部署到 Github Pages hexo d(之后统一简称“重新部署”) 5. 绑定域名 在这之前，博客就算是已经完成了，但是没有一个专有的域名就会觉得档次跟不上。之前我们在 github 新建项目的时候强调要用自己的 github 用户名 开始，以.github.io 作为后缀，如果不是这样，当然可以，那我们打开博客的地址可能就是下面这样： https://username.github.io/xxxx.github.io 很怪异不是吗？不仅是为了方便，也是防止不必要的小麻烦。下面就说说如何操作(前提你已经有了一个备案完成的域名或者你选择部分平台提供的免费的): (以阿里云购买域名为例) 打开控制台终端，键入： 1ping hahamonkey.github.io 找到博客域名(hahamonkey.github.io)对应的IP，打开阿里云控制台添加域名解析，如下图(可能有所差别)： 将其指向Github Pages 博客对应的IP。 在 github 上该博客项目设置栏里找到 Github Pages,这个模块里有一个Custom domain，在里面添加你的域名保存；此时项目根目录下应该会多了个 CNAME 文件，内容正是你的域名（如：wzwdi.cn）。接着，重新部署，查看域名是否指向你的博客（正常情况下，域名绑定成功就不需要考虑下面所提到的)。 在 github 根目录没有生成 CNAME 的情况下，可以在本地Blog目录下的source文件里新增文件 CNAME(该文件没有后缀)，内容为域名，如：wzwdi.cn。然后重新部署。如果 GitHub 项目根目录里没有 CNAME 文件，而且不进行这步操作，那每次重新部署可能都会出现需要重新添加域名的问题。 总结 1. https协议 添加https协议，修改DNS，防止网站访问被拦截，参考：关于HEXO搭建个人博客的点点滴滴 2. 归档统计 针对 BlueLake 主题，去除归档栏文章统计功能，打开themes目录下_config.yml文件，添加 show_count: false 3. 引用图片 允许使用相对路径，打开themes目录下_config.yml文件，设置post_asset_folder: true 4. 添加“图片集” npm install hexo-asset-image --save 安装成功后，使用 hexo new filename 创建新的md文件，会在_posts目录下创建同名的文件夹，用来放该文件用到的图片资源。使用相对路径时，通常针对这里的_posts下的同名文件夹，绝对路径针对source文件下的img(如：/img/a.png) 5. npm工具安装建议 为防止某些依赖直接用npm工具安装，导致无法顺利安装完成，推荐使用国内淘宝安装镜像： 12npm install -g cnpm --registry=https://registry.npm.taobao.orgnpm config set registry https://registry.npm.taobao.org 6. 首页摘要显示 添加&lt;!--more--&gt; ，这样首页和列表页展示的文章内容就是 &lt;!--more--&gt; 之前的文字 7. 其它功能 添加本地搜索、文章置顶、评论、站点统计等功能，请参考：关于BlueLake博客主题的详细配置","link":"","permalink":"http://wzwdi.cn/04/Hexo-Github搭建博客/","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://wzwdi.cn/tags/hexo/"}]}]