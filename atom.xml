<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cobb&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/f2823b68f4b4a07d10175ab6a8ca7076</icon>
  <subtitle>旁观者的姓名永远爬不到比赛的计分板上</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wzwdi.cn/"/>
  <updated>2019-04-13T03:29:29.454Z</updated>
  <id>http://wzwdi.cn/</id>
  
  <author>
    <name>Cobb</name>
    <email>2662735959@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>123</title>
    <link href="http://wzwdi.cn/13/123/"/>
    <id>http://wzwdi.cn/13/123/</id>
    <published>2019-04-13T03:28:56.000Z</published>
    <updated>2019-04-13T03:29:29.454Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="123">123</span></h2><h3><span id="1213">1213</span></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;123&quot;&gt;123&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&quot;1213&quot;&gt;1213&lt;/span&gt;&lt;/h3&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常见浏览器兼容性问题解决方案</title>
    <link href="http://wzwdi.cn/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://wzwdi.cn/08/浏览器兼容性问题解决方案/</id>
    <published>2019-03-08T12:13:45.000Z</published>
    <updated>2019-03-09T02:19:08.674Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个前端开发人员，在面试中被问及浏览器的兼容性问题几乎是必不可免的。这个问题我觉得主要考验两点能力：</p><ul><li>是否经验丰富，能够快速的投入到工作当中</li><li>是否时刻关注前沿技术，针对某个问题对于新的解决方案是否有过了解或者说你是否能够举一反三，有好的总结能力<a id="more"></a></li></ul><p>由于CSS</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个前端开发人员，在面试中被问及浏览器的兼容性问题几乎是必不可免的。这个问题我觉得主要考验两点能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否经验丰富，能够快速的投入到工作当中&lt;/li&gt;
&lt;li&gt;是否时刻关注前沿技术，针对某个问题对于新的解决方案是否有过了解或者说你是否能够举一反三，有好的总结能力
    
    </summary>
    
    
      <category term="web" scheme="http://wzwdi.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CSS三角形【转载】</title>
    <link href="http://wzwdi.cn/07/CSS%E4%B8%89%E8%A7%92%E5%BD%A2(%E8%BD%AC%E8%BD%BD)/"/>
    <id>http://wzwdi.cn/07/CSS三角形(转载)/</id>
    <published>2019-03-07T13:00:43.000Z</published>
    <updated>2019-03-10T09:11:08.428Z</updated>
    
    <content type="html"><![CDATA[<p>在CSS中创建三角形是一项非常常见的UI任务。如果您想构建工具提示或任何下拉菜单，则可能需要一个。</p><p><img src="/img/css%E4%B8%89%E8%A7%92%E5%BD%A2/men.png" alt></p><p>有些情况下，您希望直观地连接两个元素 - 这个问题的一个解决方案是将一个组件指向另一个组件; 这是CSS三角形进入图片的地方。<a id="more"></a></p><p>正如您将看到的，我们可以通过很多方式实现所需的解决方案 - 就像在CSS中一样。在这篇文章中，我向您展示了一些样式表唯一的解决方案。</p><h2><span id="使用边框的-css-三角形">使用边框的 CSS 三角形</span></h2><p>这个解决方案是一个经常出现在CSS中的hack。虽然这是一个棘手的解决方案，但它的实现效果令人惊讶。</p><p>在CSS中，如果您创建边框，则可以完全单独设置它们（顶部，右侧，底部，左侧）。 单独的侧面以对角线（45度）方式彼此连接，如真实相框或镶木地板边框。 由于这种行为，我们可以创建三角形，我们的样式元素没有任何宽度或高度。 在此之后，我们需要为边框设置透明背景，这是不必要的。</p><html><iframe height="265" style="width: 100%;" scrolling="no" title="aMwPQe" src="//codepen.io/Cavenw/embed/aMwPQe/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/Cavenw/pen/aMwPQe/" target="_blank" rel="noopener">aMwPQe</a> by Caven  (<a href="https://codepen.io/Cavenw" target="_blank" rel="noopener">@Cavenw</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe></html><p><strong>需要以下步骤：</strong></p><ol><li>创建一个单独的元素或样式<code>::before / ::after</code> 伪元素。</li><li>选择箭头的方向。您必须为方向的不同站点边界着色。如果要指向顶部则需要为边框底部着色，则需要为边框底部着色。</li><li>设置箭头宽度; 这有点棘手。如果是顶部箭头，我们的宽度将是左侧和右侧边框宽度，但我们的高度仅为底部宽度。</li><li>设置位置。大多数时候你想要一个绝对的位置。</li></ol><h2><span id="使用clip-path的css三角形">使用Clip-path的CSS三角形</span></h2><p>CSS 的 clip-path 是一种较新的，<a href="https://caniuse.com/#feat=css-clip-path" target="_blank" rel="noopener">部分支持的功能</a>。使用它，我们可以用任何原始形式掩盖元素。就像在图形程序中绘制SVG形状一样。</p><p>这是一个复杂的规范部分，所以<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path" target="_blank" rel="noopener">如果您想了解更多，请访问MDN</a></p><html><iframe height="265" style="width: 100%;" scrolling="no" title="aMwPQe" src="//codepen.io/Cavenw/embed/aMwPQe/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/Cavenw/pen/aMwPQe/" target="_blank" rel="noopener">aMwPQe</a> by Caven  (<a href="https://codepen.io/Cavenw" target="_blank" rel="noopener">@Cavenw</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe></html><p>关于我们的例子：绘制一个三角形，我们需要 <code>polygon()</code> 函数，在设置宽度、高度、背景颜色之后，我们必须设置相对于容器边缘的的点。</p><p>使用 <code>polygon()</code> 我们可以根据需要声明任何点。欲了解更多信息和形状，你可以<a href="https://bennettfeely.com/clippy/" target="_blank" rel="noopener">访问这个很酷的游乐场</a></p><p>这种解决方案的最大缺点是浏览器支持。如果要使用它，则需要如果您想使用它，您需要设置一个后备方案。否则，这就是对这个问题最好的、不陈腐的回答。</p><p>它就像是一个面具，我们可以提出任何创造性地解决方案，如渐变背景。</p><h2><span id="带旋转变换的css三角形">带旋转变换的CSS三角形</span></h2><p>使用变换，我们可以旋转一个45度的元素，而不是隐藏其溢出的部分。看起来这个解决方案有点矫枉过正，它基于以前的解决方案，但可能会出现这种情况。</p><html><iframe height="265" style="width: 100%;" scrolling="no" title="aMwPQe" src="//codepen.io/Cavenw/embed/aMwPQe/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/Cavenw/pen/aMwPQe/" target="_blank" rel="noopener">aMwPQe</a> by Caven  (<a href="https://codepen.io/Cavenw" target="_blank" rel="noopener">@Cavenw</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe></html><p>在示例中，我们在 <code>::before</code> 上创建了一个方形元素和一个子元素。子元素的原始宽度和高度除以1.41（因为我们必须将较小的斜边设置为较大的斜边的宽度）。请注意，您还必须根据方向设置位置和变换原点。</p><h2><span id="带有-html-实体的-css-三角形">带有 HTML 实体的 CSS 三角形</span></h2><p>使用HTML实体是最基本的解决方案，但它可以在更简单的情况下工作。我总是对我在实践中看到实体的地方感到惊讶。</p><p>要使用它们，请将其中一个添加到<code>:: before</code>或<code>:: after</code>伪元素的content属性中。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">◄ : &amp;<span class="number">#9668</span>; </span><br><span class="line">► : &amp;<span class="number">#9658</span>; </span><br><span class="line">▼ : &amp;<span class="number">#9660</span>; </span><br><span class="line">▲ : &amp;<span class="number">#9650</span>;</span><br></pre></td></tr></table></figure><hr><p>原文链接：<a href="https://pineco.de/quick-tip-css-triangles/" target="_blank" rel="noopener">快速了解CSS三角形</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在CSS中创建三角形是一项非常常见的UI任务。如果您想构建工具提示或任何下拉菜单，则可能需要一个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/css%E4%B8%89%E8%A7%92%E5%BD%A2/men.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;有些情况下，您希望直观地连接两个元素 - 这个问题的一个解决方案是将一个组件指向另一个组件; 这是CSS三角形进入图片的地方。
    
    </summary>
    
    
      <category term="css" scheme="http://wzwdi.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS实现水平垂直居中</title>
    <link href="http://wzwdi.cn/07/CSS%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    <id>http://wzwdi.cn/07/CSS实现水平垂直居中/</id>
    <published>2019-03-07T12:44:35.000Z</published>
    <updated>2019-03-10T12:56:04.657Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名前端工程师，处理居中问题是。实现 CSS 居中的方式有很多种，各有利弊，这里我总结一下我遇到过或者用过的方案。</p><p><img src="/img/css%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/css%E5%B1%85%E4%B8%AD.png" alt="img"></p><h2><span id="水平居中">水平居中</span></h2><h3><span id="内联元素水平居中">内联元素水平居中</span></h3><p>利用 <code>text-align: center</code> 可以实现在块级元素内部的内联元素水平居中。这种方法对内联元素<code>inline</code>，内联块 <code>inline-block</code> ，内联表 <code>inline-table</code>，<code>inline-flex</code> 元素水平居中均有效(即行内或类行内元素)</p><blockquote><p>text-align: center</p></blockquote><h3><span id="块级元素水平居中">块级元素水平居中</span></h3><p>设置<strong>固定宽度</strong>块级元素左右外边距为 <code>auto</code></p><blockquote><p>margin: 0 auto</p></blockquote><h3><span id="多块级元素水平居中">多块级元素水平居中</span></h3><h4><span id="利用inline-block">利用inline-block</span></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一名前端工程师，处理居中问题是。实现 CSS 居中的方式有很多种，各有利弊，这里我总结一下我遇到过或者用过的方案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/css%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/css%E5%B1%85%E4
      
    
    </summary>
    
    
      <category term="css" scheme="http://wzwdi.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Git操作指南</title>
    <link href="http://wzwdi.cn/07/Git%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
    <id>http://wzwdi.cn/07/Git操作指南/</id>
    <published>2019-03-07T12:38:10.000Z</published>
    <updated>2019-03-07T12:38:10.233Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建博客</title>
    <link href="http://wzwdi.cn/04/Hexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://wzwdi.cn/04/Hexo-Github搭建博客/</id>
    <published>2019-03-04T06:47:07.000Z</published>
    <updated>2019-04-12T13:43:24.841Z</updated>
    
    <content type="html"><![CDATA[<p>一直打算重新整一个博客，由于实习和准备毕业论文的原因搁置下来。刚好利用这几天的闲余时间，也在想要用什么方式去实现，最终选择了<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a>。这里分享一下从0到1搭建博客以及这个过程中遇到的一些问题，又是如何解决的。<strong>(注：本文基于Mac系统)</strong></p><p><img src="/img/hexo/hexo.png" alt></p><p>使用GitHub Pages + Hexo有以下几点好处：<a id="more"></a></p><ul><li>无需关注生成网页源码的细节，只需用markdown攥写你的文章</li><li>github免费提供无限资源空间</li><li>Hexo基于Node.js，其对数据的静态处理方式来的更高效</li><li>相对于搭建独立博客，有绝对的控制权，管理方便</li></ul><hr><h2><span id="环境配置">环境配置</span></h2><ul><li>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li>安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><h2><span id="创建github项目">创建Github项目</span></h2><ol><li>打开<a href="https://github.com/" target="_blank" rel="noopener">github</a>，新建项目，项目名称推荐<code>username.github.io</code>(其中username为你的github名) 的形式，原因后面会提到，另外勾上 <code>README</code> 初始化选项；</li><li>打开<code>setting</code>，找到<code>Github Pages</code>，<code>choose a theme</code>选择一个主题。重新进入设置页找到 Github Pages</li><li>点击 <a href="https://hahamonkey.github.io" target="_blank" rel="noopener">https://hahamonkey.github.io</a> 就会出现相应的网页了</li></ol><h2><span id="hexo安装">Hexo安装</span></h2><h3><span id="安装hexo">安装Hexo</span></h3><p>首先，在合适的地方新建文件夹，例如在D盘新建Blog(D:\Blog)目录。接着打开控制台，定位到博客目录，键入下面的指令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-cli -g  （可能会有几条报错语句，无视就好）</span><br><span class="line">npm <span class="keyword">install</span> hexo <span class="comment">--save </span></span><br><span class="line">hexo -v (查看是否安装成功)</span><br></pre></td></tr></table></figure><p>接着初始化博客<code>hexo init</code>，<code>hexo g</code>生成静态资源，<code>hexo s</code>打开本地服务器预览网站。到此，单独的两部分都完成了。</p><h3><span id="本地代码远程连接github">本地代码远程连接Github</span></h3><ol><li>控制台输入：</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user<span class="selector-class">.name</span> <span class="string">"username"</span>   <span class="comment">// username-&gt;github用户名</span></span><br><span class="line">git config --global user<span class="selector-class">.email</span> <span class="string">"email"</span>  <span class="comment">// email-&gt;github绑定邮箱</span></span><br></pre></td></tr></table></figure><ol start="2"><li>生成密钥 SSH key:</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"email"</span></span><br><span class="line">eval <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span>   (添加密钥到ssh-agent)</span><br><span class="line">ssh-<span class="builtin-name">add</span> ~/.ssh/id_rsa  (添加生成的SSH key到ssh-agent)</span><br></pre></td></tr></table></figure><ol start="3"><li>打开<a href="https://github.com" target="_blank" rel="noopener">github</a>，新建SSH。接着打开控制台终端定位到根目录，输入：</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line">open .</span><br></pre></td></tr></table></figure><p>复制<code>id_rsa.pub</code>文件中的内容到新建的SSH中</p><ol start="4"><li>打开 Blog 根目录下的_config.yml文件，在文件的末尾添加如下配置：</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>: </span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/hahamonkey/hahamonkey.github.io</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br><span class="line"></span><br><span class="line">（注意： 冒号后跟空格符）</span><br></pre></td></tr></table></figure><h3><span id="写作">写作</span></h3><p>到了这一步，搭建hexo博客基本上算是完成了，接下来可以看一下搭建的博客是什么样子。记得每次新建文章之前 <code>hexo clean</code> 删除缓存文件，防止修改分类和标签或者修改主题之后无效，好了，那就来试一下吧：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo <span class="keyword">new</span> <span class="type">post</span> filename    生成文件后，markdown语法编辑，具体参考 hexo官方文档</span><br><span class="line">hexo g      生成静态文件</span><br><span class="line">hexo s      打开本地服务器预览（选择性操作）</span><br><span class="line">hexo d      部署到 Github Pages</span><br></pre></td></tr></table></figure><p>接着打开 <a href="https://hahamonkey.github.io" target="_blank" rel="noopener">https://hahamonkey.github.io</a> 查看效果</p><h3><span id="更换主题">更换主题</span></h3><p>你可能会觉得一开始选择的博客主题不太理想，好吧，当然会考虑到，也给你提供了一些<a href="https://hexo.io/themes/index.html" target="_blank" rel="noopener">选择</a>。比较之下，这款 <a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">BlueLake</a> 甚合我意，那就开始吧：</p><ol><li>首先，下载这个主题</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/chaooo/hexo-theme-BlueLake.git themes/bluelake</span><br></pre></td></tr></table></figure><ol start="2"><li>打开Blog根目录下的 _config.yml 文件，找到 <code>theme</code> 字段,设置 <code>theme: bluelake</code></li><li>清除缓存 <code>hexo clean</code>，生成静态文件 <code>hexo g</code>，部署到 Github Pages <code>hexo d</code>(之后统一简称“重新部署”)</li></ol><h3><span id="绑定域名">绑定域名</span></h3><p>在这之前，博客就算是已经完成了，但是没有一个专有的域名就会觉得档次跟不上。之前我们在 github 新建项目的时候强调要用自己的 <code>github 用户名</code> 开始，以<code>.github.io</code> 作为后缀，如果不是这样，当然可以，那我们打开博客的地址可能就是下面这样：</p><blockquote><p><a href="https://username.github.io/xxxx.github.io" target="_blank" rel="noopener">https://username.github.io/xxxx.github.io</a></p></blockquote><p>很怪异不是吗？不仅是为了方便，也是防止不必要的小麻烦。下面就说说如何操作(前提你已经有了一个备案完成的域名或者你选择部分平台提供的免费的):</p><ol><li>(以阿里云购买域名为例) 打开控制台终端，键入：</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping hahamonkey<span class="selector-class">.github</span><span class="selector-class">.io</span></span><br></pre></td></tr></table></figure><p>找到博客域名(<a href="http://hahamonkey.github.io" target="_blank" rel="noopener">hahamonkey.github.io</a>)对应的IP，打开阿里云控制台添加域名解析，如下图(可能有所差别)：<br><img src="/img/hexo/as.png" alt="域名解析"><br>将其指向Github Pages 博客对应的IP。</p><ol start="2"><li>在 github 上该博客项目设置栏里找到 <code>Github Pages</code>,这个模块里有一个<code>Custom domain</code>，在里面添加你的域名保存；此时项目根目录下应该会多了个 <code>CNAME</code> 文件，内容正是你的域名（如：<a href="http://wzwdi.cn">wzwdi.cn</a>）。接着，重新部署，查看域名是否指向你的博客（正常情况下，域名绑定成功就不需要考虑下面所提到的)。<br><img src="/img/hexo/domain.png" alt="添加域名"></li><li>在 github 根目录没有生成 <code>CNAME</code> 的情况下，可以在本地Blog目录下的source文件里新增文件 <code>CNAME</code>(该文件没有后缀)，内容为<code>域名</code>，如：<a href="http://wzwdi.cn">wzwdi.cn</a>。然后重新部署。如果 GitHub 项目根目录里没有 CNAME 文件，而且不进行这步操作，那每次重新部署可能都会出现需要重新添加域名的问题。</li></ol><h2><span id="总结">总结</span></h2><html><br><html><h3><span id="https协议">https协议</span></h3><p>添加https协议，修改DNS，防止网站访问被拦截，参考：<a href="https://juejin.im/post/5a6ee00ef265da3e4b770ac1#heading-28" target="_blank" rel="noopener">关于HEXO搭建个人博客的点点滴滴</a></p><h3><span id="归档统计">归档统计</span></h3><p>针对 BlueLake 主题，去除归档栏文章统计功能，打开themes目录下_config.yml文件，添加 <code>show_count: false</code></p><h3><span id="引用图片">引用图片</span></h3><p>允许使用相对路径，打开themes目录下_config.yml文件，设置<code>post_asset_folder: true</code></p><h3><span id="添加图片集">添加“图片集”</span></h3><blockquote><p>npm install hexo-asset-image --save</p></blockquote><p>安装成功后，使用 <code>hexo new filename</code> 创建新的md文件，会在_posts目录下创建同名的文件夹，用来放该文件用到的图片资源。使用相对路径时，通常针对这里的_posts下的同名文件夹，绝对路径针对source文件下的img(如：/img/a.png)</p><h3><span id="npm工具安装建议">npm工具安装建议</span></h3><p>为防止某些依赖直接用npm工具安装，导致无法顺利安装完成，推荐使用国内淘宝安装镜像：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --<span class="keyword">registry</span>=https://<span class="keyword">registry</span>.npm.taobao.org</span><br><span class="line">npm config <span class="keyword">set</span> <span class="keyword">registry</span> https://<span class="keyword">registry</span>.npm.taobao.org</span><br></pre></td></tr></table></figure><h3><span id="首页摘要显示">首页摘要显示</span></h3><p>添加<code>&lt;!--more--&gt;</code> ，这样首页和列表页展示的文章内容就是 <code>&lt;!--more--&gt;</code> 之前的文字</p><h3><span id="其它功能">其它功能</span></h3><p>添加本地搜索、文章置顶、评论、站点统计等功能，请参考：<a href="https://chaoo.oschina.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html" target="_blank" rel="noopener">关于BlueLake博客主题的详细配置</a></p></html></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直打算重新整一个博客，由于实习和准备毕业论文的原因搁置下来。刚好利用这几天的闲余时间，也在想要用什么方式去实现，最终选择了&lt;a href=&quot;https://hexo.io/zh-cn/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;。这里分享一下从0到1搭建博客以及这个过程中遇到的一些问题，又是如何解决的。&lt;strong&gt;(注：本文基于Mac系统)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/hexo/hexo.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;使用GitHub Pages + Hexo有以下几点好处：
    
    </summary>
    
    
      <category term="hexo" scheme="http://wzwdi.cn/tags/hexo/"/>
    
  </entry>
  
</feed>
