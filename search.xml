<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常见浏览器兼容性问题解决方案</title>
      <link href="/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2><span id="前言">前言</span></h2><p>作为一个前端开发人员，在面试中被问及浏览器的兼容性问题几乎是必不可免的。这个问题我觉得主要考验两点能力：</p><ul><li>是否经验丰富，能够快速的投入到工作当中</li><li>是否时刻关注前沿技术，针对某个问题对于新的解决方案是否有过了解或者说你是否能够举一反三，有好的总结能力<a id="more"></a></li></ul><p>其实，对于任何Web项目，不管用于开发的平台是什么，跨浏览器兼容性错误都是不可避免的。由于市场上浏览器种类众多，不同浏览器其内核不尽相同，所以各浏览器对网页的解析就有一定出入，这也是导致浏览器兼容问题的主要原因。下面列举一些市场上常见的浏览器：</p><blockquote><ol><li><strong>Webkit</strong>：Safari、Chrome等，使用此内核的浏览器市场占有率最大</li><li><strong>Trident</strong>：IE、MaxThon、360、搜狗浏览器等，该类内核的浏览器市场占有率屈居第二</li><li><strong>GecKo</strong>：Netscaper6及以上版本，浏览器代表有：MozillaSuite、SeaMonkey等</li><li><strong>Presto</strong>: 原来Opera7及以上均为此内核，不过现在基本淘汰使用Blink内核，Blink内核作为Webkit的分支</li></ol></blockquote><p>接下来，我们进入正题，讨论浏览器的兼容性问题无非就是三个方面：<code>HTML和CSS兼容性</code>、<code>交互兼容性</code>以及<code>浏览器hack</code>三个方面，本文中简单列举一些常见的兼容性问题以及相应的解决方案：</p><h2><span id="html-和-css-兼容">HTML 和 CSS 兼容</span></h2><h3><span id="1-浏览器的初始化样式不同导致的兼容性问题">1. 浏览器的初始化样式不同导致的兼容性问题</span></h3><p>针对这个问题很多人会采取 <code>* {margin: 0; padding: 0;}</code> 的方式，这种方式简单方便的一次性重置所有HTML网页元素的浏览器样式，代码少，控制量大。与此同时，由于过于暴力，方便的同时重置了本不需要重置的样式，例如table元素，这个时候就要需要为它单独再设置默认样式，增加了代码量。目前大多数采取的方式是通过 <code>Normalize.css</code> 来抹平差异化,定制自己的 <code>reset.css</code>也当然可以，不过要尽量避免通配符形式全局重置的暴力写法。对于IE浏览器和非IE浏览器之间的区别，基本使用 normarize.css 和 reset.css 能处理大部分的问题。</p><h3><span id="2-浏览器对-css3-的支持">2. 浏览器对 CSS3 的支持</span></h3><p>页面终究是离不开浏览器的渲染，并不是所有的浏览器都支持CSS3的特性。幸运的是，CSS3特性大部分都已经有了很好的浏览器支持度，各浏览器对CSS3的支持也是越来越完善，但仍然存在部分属性在使用的时候加上浏览器前缀，浏览器内核与前缀对应关系如下（不同浏览器对具体属性的兼容可以参考 <a href="https://caniuse.com/" target="_blank" rel="noopener">caniuse</a>）：<br><img src="/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7.png" alt></p><h3><span id="3-透明属性的兼容设置">3. 透明属性的兼容设置</span></h3><p>在还原设计稿的时候常常会用到透明属性，但是 IE9 以下浏览器不支持 <code>opacity</code> 属性。下面给出不同版本 IE浏览器的解决方案：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">opacity</span>: 0.5;</span><br><span class="line"></span><br><span class="line"><span class="attribute">filter</span>: alpha(opcaity = 50); // IE6 - IE8 习惯使用filter滤镜属性来进行实现</span><br><span class="line">filter： progid:DXImageTransform.Microsoft.Alpha(style = 0, opacity = 50); // IE4-IE9都支持滤镜写法progid:DXImageTransform.Microsoft.Alpha(Opacity=xx)</span><br></pre></td></tr></table></figure><h3><span id="4-外边距合并问题">4. 外边距合并问题</span></h3><p>块的顶部外边距和底部外边距有时候会重合为单个外边距，其大小为两值中间的最大值，这种行为就被称为外边距合并。通常情况下外边距合并发生在三种情况下：</p><ul><li>相邻兄弟元素：两个兄弟元素之间的外边距回去两个元素外边距最大值</li><li>父元素和子元素：同样取两个外边距中的最大值</li><li>空元素：本身的上下外边距合并，取其中最大值</li></ul><p>那么，该如何阻止这种问题的发生？因为只有是静态流的元素才会发生外边距合并，故设置浮动、定位都可以使得不会发生外边距合并的问题，但 <code>inline-block</code>是个例外，它既没有脱离文档流，但是它也不会发生这种现象。另外，由于 margin需要直接接触才会合并，根据盒子模型，针对第二种父元素和子元素，可以给父元素设置<code>border</code>或<code>padding</code>属性也是可以防止外边距合并的发生的。</p><h3><span id="5-chrome下默认文本解析">5、chrome下默认文本解析</span></h3><p>Chrome浏览器会将小于12px的文本强制按照12px来解析。chrome27以前的解决办法通过设置<code>-webkit-text-size-adjust: none:</code>来解决，现在可以通过CSS3的变换属性缩放来解决</p><h3><span id="6-部分浏览器设置较小高度标签失去控制">6. 部分浏览器设置较小高度标签失去控制</span></h3><p>在 IE6、7 和遨游浏览器中设置较小高度标签（一般小于10px）会超出设置的高度。出现这种问题的原因是IE8之前的浏览器会给标签一个最小默认的行高的高度，即使标签是空的，标签的高度还是会达到默认的行高。这种情况下给超出高度的标签设置<code>overflow: hidden;</code>或者设置行高小于设置的高度。</p><h3><span id="7-css-hack">7. CSS Hack</span></h3><p>兼容性属性设置，注意书写的顺序：<strong>优先写高等级浏览器支持方式、优先写支持浏览器多的方式</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*以 color 属性为例，注意书写顺序*/</span></span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;   <span class="comment">//所有浏览器都支持</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0f0</span> <span class="meta">!important</span>;   <span class="comment">//只有 IE6 无效</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00f</span>\<span class="number">9</span>;  <span class="comment">//所有 IE 都有效</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0</span>\<span class="number">0</span>;  <span class="comment">//IE8+ 有效</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f0f</span>\<span class="number">9</span>\<span class="number">0</span>; <span class="comment">//IE9+ 有效</span></span><br><span class="line">  *<span class="attribute">color</span>: <span class="number">#fff</span>;  <span class="comment">//仅 IE6, IE7 有效</span></span><br><span class="line">  <span class="selector-id">#color</span>: <span class="number">#0ff</span>;  <span class="comment">//仅 IE6, IE7 有效</span></span><br><span class="line">  +<span class="attribute">color</span>: <span class="number">#800</span>;  <span class="comment">//仅 IE6, IE7 有效</span></span><br><span class="line">  -<span class="attribute">color</span>: <span class="number">#008</span>;  <span class="comment">//只有 IE6 有效</span></span><br><span class="line">  _color: <span class="number">#080</span>;  <span class="comment">//只有 IE6 有效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="交互兼容性">交互兼容性</span></h2><h3><span id="1-获取兄弟节点">1. 获取兄弟节点</span></h3><p>ie8以前不支<code>·previousElementSibling</code>和<code>nextElementSibling</code>,以及诸如此类带有Element的元素属性。利用previousSibling和 nextSibling等不带Element的属性实现如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取下一个紧邻的兄弟元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNextElement</span><span class="params">(element)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ele = element;</span><br><span class="line">  <span class="keyword">if</span>(ele.nextElementSibling) <span class="keyword">return</span> ele.nextElementSibling;</span><br><span class="line">  <span class="keyword">do</span>&#123;</span><br><span class="line">    ele = ele.nextSibling;</span><br><span class="line">  &#125;<span class="keyword">while</span>(ele &amp;&amp; ele.nodeType !== <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> ele;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取上一个紧邻的兄弟元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPreviousElement</span><span class="params">(element)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ele = element;</span><br><span class="line">  <span class="keyword">if</span>(ele.perviousElementSibling) <span class="keyword">return</span> ele.perviousElementSibling;</span><br><span class="line">  <span class="keyword">do</span>&#123;</span><br><span class="line">    ele = ele.perviousSibling;</span><br><span class="line">  &#125;<span class="keyword">while</span>(ele &amp;&amp; ele.nodeType !== <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> ele;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第一个子元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirstElement</span><span class="params">(parent)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">parent</span>.firstElementChild) <span class="keyword">return</span> <span class="keyword">parent</span>.firstElementChild;</span><br><span class="line">  <span class="keyword">var</span> ele = <span class="keyword">parent</span>.firstChild;</span><br><span class="line">  <span class="keyword">while</span>(ele &amp;&amp; ele.nodeType !== <span class="number">1</span>) ele = ele.nextSibling;</span><br><span class="line">  <span class="keyword">return</span> ele;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取最后一个子元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLastElement</span><span class="params">(parent)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">parent</span>.LastElementChild) <span class="keyword">return</span> <span class="keyword">parent</span>.LastElementChild;</span><br><span class="line">  <span class="keyword">var</span> ele = <span class="keyword">parent</span>.lastChild;</span><br><span class="line">  <span class="keyword">while</span>(ele &amp;&amp; ele.nodeType !== <span class="number">1</span>) ele = ele.perviousSibling;</span><br><span class="line">  <span class="keyword">return</span> ele;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有兄弟元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sibling</span><span class="params">(ele)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!ele) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> elements = [ ];</span><br><span class="line">  <span class="keyword">var</span> el = ele.previousSibling;</span><br><span class="line">  <span class="keyword">while</span>(el)&#123;</span><br><span class="line">  <span class="keyword">if</span>(el.nodeType === <span class="number">1</span>)</span><br><span class="line">    elements.push(el);</span><br><span class="line">  el = el.previousSibling;</span><br><span class="line">  &#125;</span><br><span class="line">  el = element.nextSibling;</span><br><span class="line">  <span class="keyword">while</span>(el)&#123;</span><br><span class="line">  <span class="keyword">if</span>(el.nodeType === <span class="number">1</span>)</span><br><span class="line">    elements.push(el);</span><br><span class="line">  el = el.nextSibling;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> elements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，IE中有一些很好用的 DOM 方法，但是其他浏览器却没有，比如:</p><ul><li>ele.swapNode(anotherEle)用来交换节点</li><li>ele.removeNode()删除当前节点</li><li>ele.insertAgjacentHTML(‘position’,‘HTMLText’)和ele.insertAgjacentHTML(‘position’,ele)用来插入节点；<br>部分实现方式如下：</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//实现swapNode方法</span><br><span class="line">if(window.Node &amp;&amp; !<span class="keyword">Node</span>.<span class="title">prototype</span>.swapNode)&#123;</span><br><span class="line">  <span class="keyword">Node</span>.<span class="title">prototype</span>.swapNode = function(<span class="keyword">node</span><span class="title">)&#123;</span></span><br><span class="line"><span class="title">    var</span> nextSibling = this.nextSibling;</span><br><span class="line">    var parentNode = this.parentNode;</span><br><span class="line">    <span class="keyword">node</span>.<span class="title">parentNode</span>.replaceChild(this, <span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">    parentNode</span>.insertBefore(<span class="keyword">node</span><span class="title">, nextSibling</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//实现removeNode</span><br><span class="line">if(window.Node &amp;&amp; !<span class="keyword">Node</span>.<span class="title">prototype</span>.removeNode)&#123;</span><br><span class="line">  <span class="keyword">Node</span>.<span class="title">prototype</span>.removeNode = function()&#123;</span><br><span class="line">    this.parentNode.removeChild(this);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//insertAdjacentHTML和insertAdjacentElement可以用insertBefore代替</span><br><span class="line">//由于有现成方法替换，这里不写具体实现了</span><br></pre></td></tr></table></figure><h3><span id="2-注册事件">2. 注册事件</span></h3><p>标准的绑定方法有两种，addEventListener和attachEvent前者是标准浏览器支持的API，后者是IE8以下浏览器支持的API:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如给一个button注册click事件</span></span><br><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>);  <span class="comment">//button是一个&lt;button&gt;元素</span></span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;alert(<span class="string">"button clicked."</span>);&#125;;</span><br><span class="line"><span class="keyword">if</span>(el.addEventLister)&#123;</span><br><span class="line">    el.addEventListener(<span class="string">"click"</span>, handler,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(el.attachEvent)&#123;</span><br><span class="line">    el.attachEvent(<span class="string">"onclick"</span>, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是：</p><ul><li>addEventLister的第一个参数事件类型是不加on前缀的，而attachEvent中需要加on前缀;</li><li>addEventLister中的事件回调函数中的this指向事件元素target本身，而attachEvent中的事件回调函数的this指向的是window;</li><li>addEventLister有第三个参数，true表示事件工作在捕获阶段，false为冒泡阶段(默认值:false)。而attachEvent只能工作在冒泡阶段;</li><li>解除事件方法标准方法removeListen()，在IE8中，对应使用detachEvent()。注意，他们和上面的注册方法一一对应，不能混用;</li><li>阻止默认事件标准方法 event.preventDefault(), 在IE8中，使用 event.returnValue = false;</li><li>阻止冒泡的方法 event.stopPropagation(), 在IE8中，使用 event.cancelBubble = true;</li><li>老版本 IE 中，事件函数内部的 this 不是被监听元素本身，而是 window 。故应该使用 call 改变 this 指向。</li></ul><h3><span id="3-事件对象">3. 事件对象</span></h3><ul><li>e.eventPhase 事件阶段，IE8及以前不支持，因为那时不支持捕获</li><li>e.target 始终是触发事件的对象。IE8以前用srcElement</li><li>ie8以前用window.event获得事件对象，而不是回调函数的参数e</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> e || window.event;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 兼容<span class="keyword">target</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">target</span> = e.<span class="keyword">target</span> || e.srcElement;</span><br><span class="line">  //<span class="keyword">do</span> something <span class="keyword">else</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3><span id="4-获取鼠标在页面上的位置">4. 获取鼠标在页面上的位置</span></h3><p>ie8以前没有完整的位置属性，部分属性需要通过已有的属性计算得到：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line"><span class="keyword">var</span> scrollLeft = <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">document</span>.body.scrollLeft;</span><br><span class="line"><span class="keyword">var</span> pageX = e.pageX || e.x || e.clientX + scrollLeft;</span><br><span class="line"><span class="keyword">var</span> pageY = e.pageY || e.y || e.clientY + scrollTop;</span><br></pre></td></tr></table></figure><h3><span id="5-取消用户的文本的选择多为移动端">5. 取消用户的文本的选择(多为移动端)</span></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">window</span><span class="selector-class">.getSelection</span> ? <span class="selector-tag">window</span><span class="selector-class">.getSelection</span>()<span class="selector-class">.removeAllRanges</span>() : <span class="selector-tag">document</span><span class="selector-class">.selection</span><span class="selector-class">.empty</span>();</span><br></pre></td></tr></table></figure><h2><span id="浏览器hack">浏览器Hack</span></h2><h3><span id="1-快速判断-ie-浏览器版本">1. 快速判断 IE 浏览器版本</span></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE 8]&gt; ie8 &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 9]&gt; ie9 &lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="2-快速判断safari浏览器">2. 快速判断Safari浏览器</span></h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var isSafari</span>  = /a/.__proto__==<span class="string">'//'</span>;</span><br></pre></td></tr></table></figure><h3><span id="3-判断是否为chrome浏览器">3. 判断是否为Chrome浏览器</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isChrome = <span class="built_in">Boolean</span>(<span class="built_in">window</span>.chrome);</span><br></pre></td></tr></table></figure><hr><p>本文中只是讨论了部分常见的浏览器兼容性问题，之后会作补充</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS三角形【转载】</title>
      <link href="/07/CSS%E4%B8%89%E8%A7%92%E5%BD%A2(%E8%BD%AC%E8%BD%BD)/"/>
      <url>/07/CSS%E4%B8%89%E8%A7%92%E5%BD%A2(%E8%BD%AC%E8%BD%BD)/</url>
      
        <content type="html"><![CDATA[<p>在CSS中创建三角形是一项非常常见的UI任务。如果您想构建工具提示或任何下拉菜单，则可能需要一个。</p><p><img src="/img/css%E4%B8%89%E8%A7%92%E5%BD%A2/men.png" alt></p><p>有些情况下，您希望直观地连接两个元素 - 这个问题的一个解决方案是将一个组件指向另一个组件; 这是CSS三角形进入图片的地方。<a id="more"></a></p><p>正如您将看到的，我们可以通过很多方式实现所需的解决方案 - 就像在CSS中一样。在这篇文章中，我向您展示了一些样式表唯一的解决方案。</p><h2><span id="使用边框的-css-三角形">使用边框的 CSS 三角形</span></h2><p>这个解决方案是一个经常出现在CSS中的hack。虽然这是一个棘手的解决方案，但它的实现效果令人惊讶。</p><p>在CSS中，如果您创建边框，则可以完全单独设置它们（顶部，右侧，底部，左侧）。 单独的侧面以对角线（45度）方式彼此连接，如真实相框或镶木地板边框。 由于这种行为，我们可以创建三角形，我们的样式元素没有任何宽度或高度。 在此之后，我们需要为边框设置透明背景，这是不必要的。</p><html><iframe height="265" style="width: 100%;" scrolling="no" title="aMwPQe" src="//codepen.io/Cavenw/embed/aMwPQe/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/Cavenw/pen/aMwPQe/" target="_blank" rel="noopener">aMwPQe</a> by Caven  (<a href="https://codepen.io/Cavenw" target="_blank" rel="noopener">@Cavenw</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe></html><p><strong>需要以下步骤：</strong></p><ol><li>创建一个单独的元素或样式<code>::before / ::after</code> 伪元素。</li><li>选择箭头的方向。您必须为方向的不同站点边界着色。如果要指向顶部则需要为边框底部着色，则需要为边框底部着色。</li><li>设置箭头宽度; 这有点棘手。如果是顶部箭头，我们的宽度将是左侧和右侧边框宽度，但我们的高度仅为底部宽度。</li><li>设置位置。大多数时候你想要一个绝对的位置。</li></ol><h2><span id="使用clip-path的css三角形">使用Clip-path的CSS三角形</span></h2><p>CSS 的 clip-path 是一种较新的，<a href="https://caniuse.com/#feat=css-clip-path" target="_blank" rel="noopener">部分支持的功能</a>。使用它，我们可以用任何原始形式掩盖元素。就像在图形程序中绘制SVG形状一样。</p><p>这是一个复杂的规范部分，所以<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path" target="_blank" rel="noopener">如果您想了解更多，请访问MDN</a></p><html><iframe height="265" style="width: 100%;" scrolling="no" title="aMwPQe" src="//codepen.io/Cavenw/embed/aMwPQe/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/Cavenw/pen/aMwPQe/" target="_blank" rel="noopener">aMwPQe</a> by Caven  (<a href="https://codepen.io/Cavenw" target="_blank" rel="noopener">@Cavenw</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe></html><p>关于我们的例子：绘制一个三角形，我们需要 <code>polygon()</code> 函数，在设置宽度、高度、背景颜色之后，我们必须设置相对于容器边缘的的点。</p><p>使用 <code>polygon()</code> 我们可以根据需要声明任何点。欲了解更多信息和形状，你可以<a href="https://bennettfeely.com/clippy/" target="_blank" rel="noopener">访问这个很酷的游乐场</a></p><p>这种解决方案的最大缺点是浏览器支持。如果要使用它，则需要如果您想使用它，您需要设置一个后备方案。否则，这就是对这个问题最好的、不陈腐的回答。</p><p>它就像是一个面具，我们可以提出任何创造性地解决方案，如渐变背景。</p><h2><span id="带旋转变换的css三角形">带旋转变换的CSS三角形</span></h2><p>使用变换，我们可以旋转一个45度的元素，而不是隐藏其溢出的部分。看起来这个解决方案有点矫枉过正，它基于以前的解决方案，但可能会出现这种情况。</p><html><iframe height="265" style="width: 100%;" scrolling="no" title="aMwPQe" src="//codepen.io/Cavenw/embed/aMwPQe/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/Cavenw/pen/aMwPQe/" target="_blank" rel="noopener">aMwPQe</a> by Caven  (<a href="https://codepen.io/Cavenw" target="_blank" rel="noopener">@Cavenw</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe></html><p>在示例中，我们在 <code>::before</code> 上创建了一个方形元素和一个子元素。子元素的原始宽度和高度除以1.41（因为我们必须将较小的斜边设置为较大的斜边的宽度）。请注意，您还必须根据方向设置位置和变换原点。</p><h2><span id="带有-html-实体的-css-三角形">带有 HTML 实体的 CSS 三角形</span></h2><p>使用HTML实体是最基本的解决方案，但它可以在更简单的情况下工作。我总是对我在实践中看到实体的地方感到惊讶。</p><p>要使用它们，请将其中一个添加到<code>:: before</code>或<code>:: after</code>伪元素的content属性中。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">◄ : &amp;<span class="number">#9668</span>; </span><br><span class="line">► : &amp;<span class="number">#9658</span>; </span><br><span class="line">▼ : &amp;<span class="number">#9660</span>; </span><br><span class="line">▲ : &amp;<span class="number">#9650</span>;</span><br></pre></td></tr></table></figure><hr><p>原文链接：<a href="https://pineco.de/quick-tip-css-triangles/" target="_blank" rel="noopener">快速了解CSS三角形</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS实现水平垂直居中</title>
      <link href="/07/CSS%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
      <url>/07/CSS%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>作为一名前端工程师，元素居中是日常开发中处理的最常见问题之一。实现 CSS 居中的方式有很多种，各有利弊，这里我总结一下我遇到过或者用过的方案。</p><p><img src="/img/css%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/css%E5%B1%85%E4%B8%AD.png" alt="img"></p><h2><span id="水平居中">水平居中</span></h2><h3><span id="1-内联元素水平居中">1. 内联元素水平居中</span></h3><p>利用 <code>text-align: center</code> 可以实现在块级元素内部的内联元素水平居中。这种方法对内联元素<code>inline</code>、内联块 <code>inline-block</code>、内联表 <code>inline-table</code>、<code>inline-flex</code> 元素水平居中均有效(即行内或类行内元素)</p><blockquote><p>text-align: center</p></blockquote><h3><span id="2-块级元素水平居中">2. 块级元素水平居中</span></h3><ul><li><strong>margin: 0 auto;</strong></li></ul><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//对于一个有固定宽度的块级元素，设置它的`margin-left`、`margin-right`均为autoj即可让元素水平居中</span><br><span class="line"></span><br><span class="line"><span class="symbol">margin:</span> <span class="number">0</span> auto</span><br></pre></td></tr></table></figure><ul><li><strong>position + margin</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: 固定值;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>position + transform</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: 固定值;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>flex布局</strong></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只需要给父元素设置如下：</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，以上写法都是不需要预先了解父元素的宽度即可设置居中，下面的这种写法就需要提交了解父元素的高度</p><ul><li><strong>position + 负外边距</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: 固定值;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">0.5</span>*宽度;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="3-多个块级元素水平居中">3. 多个块级元素水平居中</span></h3><p>如果需要居中两个或两个以上的块级元素，可能<code>flex</code>布局可以为你提供极大的便利，如下：</p><html><iframe height="265" style="width: 100%;" scrolling="no" title="Centering Row of Blocks" src="//codepen.io/chriscoyier/embed/ebing/?height=265&theme-id=0&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/chriscoyier/pen/ebing/" target="_blank" rel="noopener">Centering Row of Blocks</a> by Chris Coyier   (<a href="https://codepen.io/chriscoyier" target="_blank" rel="noopener">@chriscoyier</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><html><hr><h2><span id="垂直居中">垂直居中</span></h2><p>块级元素垂直居中与水平居中的处理方式大同小异，但还是相对于后者稍微棘手一点，下面的这些方式只是在水平居中的基础上做一些修改（主要针对特殊的属性差异）和补充，剩下的可以参考水平居中的写法类推。</p><h3><span id="1-quotinline-quot元素垂直居中">1. &quot;inline-*&quot;元素垂直居中</span></h3><p><strong>1.1 单行文本元素居中</strong><br>有时像文本或链接等行内元素居中显示，只是因为它们的上下有相等的填充</p><html><iframe height="265" style="width: 100%;" scrolling="no" title="Centering text (kinda) with Padding" src="//codepen.io/chriscoyier/embed/ldcwq/?height=265&theme-id=0&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/chriscoyier/pen/ldcwq/" target="_blank" rel="noopener">Centering text (kinda) with Padding</a> by Chris Coyier   (<a href="https://codepen.io/chriscoyier" target="_blank" rel="noopener">@chriscoyier</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><html>当然，在有些情况下无法通过这种填充的方式来进行居中，这时只需要设置`line-height`等于`height`即可<p><strong>1.2 多行文本元素居中</strong><br>顶部和底部的填充同样可以为多行文本提供居中效果，但有的时候像table-cell这种看起来的确可以通过这样的方式去实现，结果却不能将想象的效果呈现出来。这种情况下，<code>vertical-align</code>属性便能够发挥出它的作用：</p><ul><li>方案一：</li></ul><html><iframe height="265" style="width: 100%;" scrolling="no" title="Centering text (kinda) with Padding" src="//codepen.io/chriscoyier/embed/ekoFx/?height=265&theme-id=0&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/chriscoyier/pen/ekoFx/" target="_blank" rel="noopener">Centering text (kinda) with Padding</a> by Chris Coyier   (<a href="https://codepen.io/chriscoyier" target="_blank" rel="noopener">@chriscoyier</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><html><ul><li>方案二：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1%</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.parent</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="2-块级元素居中">2. 块级元素居中</span></h3><p><strong>2.1 flex布局</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  jusitify-<span class="attribute">content</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">height</span>: 固定值;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这种方式同样可以作用于多行文本元素居中</span></span><br></pre></td></tr></table></figure><p><strong>2.2 其它方式参考水平居中的实现</strong></p><hr><h2><span id="视窗单位的解决方案">视窗单位的解决方案</span></h2><p>CSS Values and Units Level 3定义了一种新的单位，称为相对视窗(viewport-relative)长度单位。</p><blockquote><ul><li>vw是相对于视窗的宽度。与你预期刚好相反,1vw相当于视窗宽度的1%，而不是100%</li><li>与vw相似的是，1vh相当于视窗高度的1%</li><li>如果视窗的宽度小于高度，1vmin等于1vw，反之，如果视窗宽度大于高度，1vmin等于1vh</li><li>如果视窗的宽度大于高度，1vmax等于1vw，反之，如果视窗宽度小于高度，1vmax等于1vh<br>如下示例：</li></ul></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50vh</span> auto <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前，这种视窗单位大多数浏览器都已经支持，缺点就是只能相对于视窗居中，看起来与粘性定位有些共同之处。</p><p>这篇分享就到这结束了，如果发现了其中有错误欢迎前来指正或者您有好的想法也希望能一起探讨</p></html></html></html></html></html></html>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git操作指南</title>
      <link href="/07/Git%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
      <url>/07/Git%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github搭建博客</title>
      <link href="/04/Hexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/04/Hexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>一直打算重新整一个博客，由于实习和准备毕业论文的原因搁置下来。刚好利用这几天的闲余时间，也在想要用什么方式去实现，最终选择了<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a>。这里分享一下从0到1搭建博客以及这个过程中遇到的一些问题，又是如何解决的。<strong>(注：本文基于Mac系统)</strong></p><p><img src="/img/hexo/hexo.png" alt></p><p>使用GitHub Pages + Hexo有以下几点好处：<a id="more"></a></p><ul><li>无需关注生成网页源码的细节，只需用markdown攥写你的文章</li><li>github免费提供无限资源空间</li><li>Hexo基于Node.js，其对数据的静态处理方式来的更高效</li><li>相对于搭建独立博客，有绝对的控制权，管理方便</li></ul><hr><h2><span id="环境配置">环境配置</span></h2><ul><li>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li>安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><h2><span id="创建github项目">创建Github项目</span></h2><ol><li>打开<a href="https://github.com/" target="_blank" rel="noopener">github</a>，新建项目，项目名称推荐<code>username.github.io</code>(其中username为你的github名) 的形式，原因后面会提到，另外勾上 <code>README</code> 初始化选项；</li><li>打开<code>setting</code>，找到<code>Github Pages</code>，<code>choose a theme</code>选择一个主题。重新进入设置页找到 Github Pages</li><li>点击 <a href="https://hahamonkey.github.io" target="_blank" rel="noopener">https://hahamonkey.github.io</a> 就会出现相应的网页了</li></ol><h2><span id="hexo安装">Hexo安装</span></h2><h3><span id="1-安装hexo">1. 安装Hexo</span></h3><p>首先，在合适的地方新建文件夹，例如在D盘新建Blog(D:\Blog)目录。接着打开控制台，定位到博客目录，键入下面的指令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-cli -g  （可能会有几条报错语句，无视就好）</span><br><span class="line">npm <span class="keyword">install</span> hexo <span class="comment">--save </span></span><br><span class="line">hexo -v (查看是否安装成功)</span><br></pre></td></tr></table></figure><p>接着初始化博客<code>hexo init</code>，<code>hexo g</code>生成静态资源，<code>hexo s</code>打开本地服务器预览网站。到此，单独的两部分都完成了。</p><h3><span id="2-本地代码远程连接github">2. 本地代码远程连接Github</span></h3><ol><li>控制台输入：</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user<span class="selector-class">.name</span> <span class="string">"username"</span>   <span class="comment">// username-&gt;github用户名</span></span><br><span class="line">git config --global user<span class="selector-class">.email</span> <span class="string">"email"</span>  <span class="comment">// email-&gt;github绑定邮箱</span></span><br></pre></td></tr></table></figure><ol start="2"><li>生成密钥 SSH key:</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"email"</span></span><br><span class="line">eval <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span>   (添加密钥到ssh-agent)</span><br><span class="line">ssh-<span class="builtin-name">add</span> ~/.ssh/id_rsa  (添加生成的SSH key到ssh-agent)</span><br></pre></td></tr></table></figure><ol start="3"><li>打开<a href="https://github.com" target="_blank" rel="noopener">github</a>，新建SSH。接着打开控制台终端定位到根目录，输入：</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line">open .</span><br></pre></td></tr></table></figure><p>复制<code>id_rsa.pub</code>文件中的内容到新建的SSH中</p><ol start="4"><li>打开 Blog 根目录下的_config.yml文件，在文件的末尾添加如下配置：</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>: </span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/hahamonkey/hahamonkey.github.io</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br><span class="line"></span><br><span class="line">（注意： 冒号后跟空格符）</span><br></pre></td></tr></table></figure><h3><span id="3-写作">3. 写作</span></h3><p>到了这一步，搭建hexo博客基本上算是完成了，接下来可以看一下搭建的博客是什么样子。记得每次新建文章之前 <code>hexo clean</code> 删除缓存文件，防止修改分类和标签或者修改主题之后无效，好了，那就来试一下吧：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo <span class="keyword">new</span> <span class="type">post</span> filename    生成文件后，markdown语法编辑，具体参考 hexo官方文档</span><br><span class="line">hexo g      生成静态文件</span><br><span class="line">hexo s      打开本地服务器预览（选择性操作）</span><br><span class="line">hexo d      部署到 Github Pages</span><br></pre></td></tr></table></figure><p>接着打开 <a href="https://hahamonkey.github.io" target="_blank" rel="noopener">https://hahamonkey.github.io</a> 查看效果</p><h3><span id="4-更换主题">4. 更换主题</span></h3><p>你可能会觉得一开始选择的博客主题不太理想，好吧，当然会考虑到，也给你提供了一些<a href="https://hexo.io/themes/index.html" target="_blank" rel="noopener">选择</a>。比较之下，这款 <a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">BlueLake</a> 甚合我意，那就开始吧：</p><ol><li>首先，下载这个主题</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/chaooo/hexo-theme-BlueLake.git themes/bluelake</span><br></pre></td></tr></table></figure><ol start="2"><li>打开Blog根目录下的 _config.yml 文件，找到 <code>theme</code> 字段,设置 <code>theme: bluelake</code></li><li>清除缓存 <code>hexo clean</code>，生成静态文件 <code>hexo g</code>，部署到 Github Pages <code>hexo d</code>(之后统一简称“重新部署”)</li></ol><h3><span id="5-绑定域名">5. 绑定域名</span></h3><p>在这之前，博客就算是已经完成了，但是没有一个专有的域名就会觉得档次跟不上。之前我们在 github 新建项目的时候强调要用自己的 <code>github 用户名</code> 开始，以<code>.github.io</code> 作为后缀，如果不是这样，当然可以，那我们打开博客的地址可能就是下面这样：</p><blockquote><p><a href="https://username.github.io/xxxx.github.io" target="_blank" rel="noopener">https://username.github.io/xxxx.github.io</a></p></blockquote><p>很怪异不是吗？不仅是为了方便，也是防止不必要的小麻烦。下面就说说如何操作(前提你已经有了一个备案完成的域名或者你选择部分平台提供的免费的):</p><ol><li>(以阿里云购买域名为例) 打开控制台终端，键入：</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping hahamonkey<span class="selector-class">.github</span><span class="selector-class">.io</span></span><br></pre></td></tr></table></figure><p>找到博客域名(<a href="http://hahamonkey.github.io" target="_blank" rel="noopener">hahamonkey.github.io</a>)对应的IP，打开阿里云控制台添加域名解析，如下图(可能有所差别)：<br><img src="/img/hexo/as.png" alt="域名解析"><br>将其指向Github Pages 博客对应的IP。</p><ol start="2"><li>在 github 上该博客项目设置栏里找到 <code>Github Pages</code>,这个模块里有一个<code>Custom domain</code>，在里面添加你的域名保存；此时项目根目录下应该会多了个 <code>CNAME</code> 文件，内容正是你的域名（如：<a href="http://wzwdi.cn">wzwdi.cn</a>）。接着，重新部署，查看域名是否指向你的博客（正常情况下，域名绑定成功就不需要考虑下面所提到的)。<br><img src="/img/hexo/domain.png" alt="添加域名"></li><li>在 github 根目录没有生成 <code>CNAME</code> 的情况下，可以在本地Blog目录下的source文件里新增文件 <code>CNAME</code>(该文件没有后缀)，内容为<code>域名</code>，如：<a href="http://wzwdi.cn">wzwdi.cn</a>。然后重新部署。如果 GitHub 项目根目录里没有 CNAME 文件，而且不进行这步操作，那每次重新部署可能都会出现需要重新添加域名的问题。</li></ol><h2><span id="总结">总结</span></h2><html><br><html><h3><span id="1-https协议">1. https协议</span></h3><p>添加https协议，修改DNS，防止网站访问被拦截，参考：<a href="https://juejin.im/post/5a6ee00ef265da3e4b770ac1#heading-28" target="_blank" rel="noopener">关于HEXO搭建个人博客的点点滴滴</a></p><h3><span id="2-归档统计">2. 归档统计</span></h3><p>针对 BlueLake 主题，去除归档栏文章统计功能，打开themes目录下_config.yml文件，添加 <code>show_count: false</code></p><h3><span id="3-引用图片">3. 引用图片</span></h3><p>允许使用相对路径，打开themes目录下_config.yml文件，设置<code>post_asset_folder: true</code></p><h3><span id="4-添加图片集">4. 添加“图片集”</span></h3><blockquote><p>npm install hexo-asset-image --save</p></blockquote><p>安装成功后，使用 <code>hexo new filename</code> 创建新的md文件，会在_posts目录下创建同名的文件夹，用来放该文件用到的图片资源。使用相对路径时，通常针对这里的_posts下的同名文件夹，绝对路径针对source文件下的img(如：/img/a.png)</p><h3><span id="5-npm工具安装建议">5. npm工具安装建议</span></h3><p>为防止某些依赖直接用npm工具安装，导致无法顺利安装完成，推荐使用国内淘宝安装镜像：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --<span class="keyword">registry</span>=https://<span class="keyword">registry</span>.npm.taobao.org</span><br><span class="line">npm config <span class="keyword">set</span> <span class="keyword">registry</span> https://<span class="keyword">registry</span>.npm.taobao.org</span><br></pre></td></tr></table></figure><h3><span id="6-首页摘要显示">6. 首页摘要显示</span></h3><p>添加<code>&lt;!--more--&gt;</code> ，这样首页和列表页展示的文章内容就是 <code>&lt;!--more--&gt;</code> 之前的文字</p><h3><span id="7-其它功能">7. 其它功能</span></h3><p>添加本地搜索、文章置顶、评论、站点统计等功能，请参考：<a href="https://chaoo.oschina.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html" target="_blank" rel="noopener">关于BlueLake博客主题的详细配置</a></p></html></html>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
